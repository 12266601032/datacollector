<?xml version="1.0" encoding="UTF-8"?>
<!--
 (c) 2014 StreamSets, Inc. All rights reserved. May not
 be copied, modified, or distributed in whole or part without
 written consent of StreamSets, Inc.
-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.streamsets</groupId>
    <artifactId>streamsets-root</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <relativePath>../root</relativePath>
  </parent>
  <groupId>com.streamsets</groupId>
  <artifactId>streamsets-pipeline-sdk</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <description>StreamSets Pipeline Stage SDK</description>
  <name>StreamSets Pipeline Stage SDK</name>
  <packaging>jar</packaging>

  <dependencies>
    <dependency>
      <groupId>com.streamsets</groupId>
      <artifactId>streamsets-pipeline-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>io.dropwizard.metrics</groupId>
      <artifactId>metrics-core</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.streamsets</groupId>
      <artifactId>streamsets-pipeline-container</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
            <configuration>
              <artifactSet>
                <includes>
                  <include>com.fasterxml.jackson.core:jackson-core</include>
                  <include>com.fasterxml.jackson.core:jackson-databind</include>
                  <include>com.fasterxml.jackson.core:jackson-annotations</include>
                </includes>
              </artifactSet>
              <relocations>
                <relocation>
                  <pattern>com.fasterxml.jackson</pattern>
                  <shadedPattern>_ss_com.fasterxml.jackson</shadedPattern>
                </relocation>
              </relocations>
              <transformers>
                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                  <resource>META-INF/services/com.fasterxml.jackson.core.ObjectCodec</resource>
                </transformer>
                <transformer implementation="org.apache.maven.plugins.shade.resource.DontIncludeResourceTransformer">
                  <resource>META-INF/services/com.fasterxml.jackson.core.JsonFactory</resource>
                </transformer>
              </transformers>
              <dependencyReducedPomLocation>${project.build.directory}/shaded-pom.xml</dependencyReducedPomLocation>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>cobertura-maven-plugin</artifactId>
        <configuration>
          <check>
            <haltOnFailure>true</haltOnFailure>
            <branchRate>0</branchRate>
            <lineRate>0</lineRate>
            <totalBranchRate>98</totalBranchRate>
            <totalLineRate>98</totalLineRate>
            <packageLineRate>98</packageLineRate>
            <packageBranchRate>98</packageBranchRate>
          </check>
        </configuration>
      </plugin>

      <!-- Need to copy the javax.annotation.processing.Processor file into
      /target/classes/META-INF/services before running the tests. This is
      required because this file defines the annotation processor class for the
      java compiler to run.
      Without this the tests defined in this module will not run the annotation
      processor.-->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>test-compile</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${basedir}/target/classes/META-INF/services</outputDirectory>
              <resources>
                <resource>
                  <directory>${basedir}/src/main/services</directory>
                  <includes>
                    <include>javax.annotation.processing.Processor</include>
                  </includes>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Explicitly setting the working directory. Otherwise the annotation
          processor generates files in ${basedir} while running the tests -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <workingDirectory>${basedir}/target/test-classes</workingDirectory>
        </configuration>
      </plugin>

      <!-- The clean plugin is called in the initialization phase to knock off the target
      directory before compiling the source files. This is required because:

      The file which defines the annotation processor - javax.annotation.processing.Processor
      is copied into the target directory in the test-compile phase in order for the
      tests to find the annotation processor.

      Subsequent install or test without clean triggers annotation processing while compiling the
      PipelineAnnotationProcessor class itself. This results in a compilation failure
      of PipelineAnnotationProcessor [Because the javac compiler is trying to find the PipelineAnnotationProcessor
      class while compiling PipelineAnnotationProcessor!!!].

      A clean before every compile solves the problem for now.-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <executions>
          <execution>
            <id>clean</id>
            <phase>initialize</phase>
            <goals>
              <goal>clean</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
