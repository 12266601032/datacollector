/**
 * (c) 2014 StreamSets, Inc. All rights reserved. May not
 * be copied, modified, or distributed in whole or part without
 * written consent of StreamSets, Inc.
 */
package com.streamsets.pipeline.sdk.testharness.internal;

import com.streamsets.pipeline.api.Batch;
import com.streamsets.pipeline.api.Record;
import com.streamsets.pipeline.runner.BatchImpl;
import com.streamsets.pipeline.sdk.testharness.RecordProducer;

import java.util.ArrayList;
import java.util.List;

/**
 * Provides methods to build Batches containing records
 * generated by the {@link com.streamsets.pipeline.sdk.testharness.RecordProducer}
 * argument.
 */
public class BatchBuilder {

  private final RecordProducer recordProducer;

  /*Source offset*/
  private String sourceOffset = null;
  /*Max records in a batch*/
  private int maxBatchSize = 0;

  public BatchBuilder(RecordProducer recordProducer) {
    this.recordProducer = recordProducer;
  }

  /**
   * Sets source off set property
   * @param sourceOffset
   */
  public void setSourceOffset(String sourceOffset) {
    this.sourceOffset = sourceOffset;
  }

  /**
   * Sets the maxBatchSize property
   * @param maxBatchSize
   */
  public void setMaxBatchSize(int maxBatchSize) {
    this.maxBatchSize = maxBatchSize;
  }

  /**
   * Builds a batch containing {@link #maxBatchSize} number of records.
   * Records are generated using the configured
   * {@link com.streamsets.pipeline.sdk.testharness.RecordProducer} instance
   *
   * @return the generated batch
   */
  public Batch build() {
    List<Record> records = new ArrayList<Record>();
    for(int i = 0; i < maxBatchSize; i++) {
      records.add(recordProducer.create());
    }
    return new BatchImpl("instance", null, records);
  }
}
