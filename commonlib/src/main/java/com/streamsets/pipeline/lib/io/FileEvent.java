/**
 * (c) 2015 StreamSets, Inc. All rights reserved. May not
 * be copied, modified, or distributed in whole or part without
 * written consent of StreamSets, Inc.
 */
package com.streamsets.pipeline.lib.io;

import com.streamsets.pipeline.api.impl.Utils;

/**
 * File events generated by the {@link com.streamsets.pipeline.lib.io.MultiFileReader} when starting and ending reading a file.
 */
public class FileEvent {
  private final LiveFile file;
  private final boolean start;

  FileEvent(LiveFile file, boolean start) {
    this.file = Utils.checkNotNull(file, "file");
    this.start = start;
  }

  /**
   * Indicates if its a file start reading event.
   *
   * @return <code>true</code> if starting the file, <code>false</code> otherwise.
   */
  public boolean isStart() {
    return start;
  }

  /**
   * Indicates if its a file end reading event.
   *
   * @return <code>true</code> if ending the file, <code>false</code> otherwise.
   */
  public boolean isEnd() {
    return !start;
  }

  /**
   * Returns the <code>LiveFile</code> triggering the event.
   *
   * @return the <code>LiveFile</code> triggering the event.
   */
  public LiveFile getFile() {
    return file;
  }

  public String toString() {
    return Utils.format("MultiFileReader.Event[file='{}' action='{}'", file, (start) ? "START" : "END");
  }

  @Override
  public int hashCode() {
    return file.hashCode() + ((start) ? 1 : -1);
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == null) {
      return false;
    }
    if (obj instanceof FileEvent) {
      FileEvent other = (FileEvent) obj;
      return file.equals(other.file) && start == other.start;
    } else {
      return false;
    }
  }
}
