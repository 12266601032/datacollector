<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_gz5_dqw_yq">
 <title>Directory Data Formats</title>
 <shortdesc>The Directory origin processes data differently based on the type of data in the file.
  Directory can process the following types of data:</shortdesc>
 <conbody>
  <dl>
   <dlentry>
    <dt>Text</dt>
    <dd><indexterm>data formats<indexterm>for Directory</indexterm></indexterm><indexterm>Directory
              origin<indexterm>data formats</indexterm></indexterm>Generates a record for each line
          in the file. </dd>
    <dd>When you configure text data properties, you define the maximum number of characters for a
          line. When a line exceeds the configured number of characters, Directory truncates the
          line.</dd>
   </dlentry>
   <dlentry>
    <dt>JSON</dt>
    <dd>Generates a record for each JSON object. You can use JSON files that include multiple JSON
          objects or a single JSON array.</dd>
    <dd>When you configure the JSON data properties, you define the maximum length of the JSON
          object. When an object exceeds the maximum length, Directory skips the object and
          continues processing with the next object. </dd>
        <dd>The skipped object is sent to the pipeline for error handling.</dd>
   </dlentry>
   <dlentry>
    <dt>Delimited</dt>
    <dd>Generates a record for each delimited record. You can use the following types of delimited
            files:<ul id="ul_a51_wzk_5q">
            <li>Default CSV (ignores empty lines)</li>
            <li>RFC4180 CSV</li>
            <li>Microsoft Excel CSV</li>
            <li>MySQL CSV</li>
            <li>Tab-separated values</li>
          </ul></dd>
    <dd>Directory can convert a file to a map based on the header line of the file. If the file does
          not include a header, Directory creates the map based on column number.</dd>
   </dlentry>
   <dlentry>
    <dt>XML</dt>
    <dd>Generates records based on the location of the XML element that you define as the record
          delimiter. If you do not define a delimiter element, Directory treats the XML file as a
          single record.</dd>
    <dd>When you configure the XML data properties, you define the maximum length of the XML record. </dd>
        <dd>When a record exceeds the maximum length, Directory skips the record and continues
          processing with the next record. The skipped record is sent to the pipeline for error
          handling.</dd>
   </dlentry>
      <dlentry>
        <dt>SDC Records</dt>
        <dd>Generates a record for every record. Use to process records generated by another
          pipeline using the SDC Record format.</dd>
        <dd>For error records, provides the original record as read from the origin in the original
          pipeline, as well as error information that you can use to correct the record. </dd>
        <dd>When processing error records, Directory expects the error file names and contents as
          generated by the original pipeline.</dd>
      </dlentry>
      <dlentry>
        <dt>Log</dt>
        <dd>Generates a record for every log line. </dd>
        <dd>When you configure the log data properties, you define the maximum length for a line.
          Directory truncates longer lines. </dd>
        <dd>You can also include the processed log line as a field in the record. If the log line is
          truncated, and you request the log line in the record, Directory includes the truncated
          line.</dd>
        <dd>You can define the log format or type to be read.</dd>
      </dlentry>
  </dl>
 </conbody>
</concept>
