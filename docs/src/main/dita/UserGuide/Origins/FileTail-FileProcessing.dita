<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_trt_thq_5r">
 <title>File Processing and Archived File Names</title>
 <shortdesc>File Tail processes the active file and archived files based on how the source server
  generates files. When you specify the naming convention for archived files, File Tail determines
  the file generation method and processes the data accordingly.</shortdesc>
 <conbody>
  <p><indexterm>File Tail origin<indexterm>file processing and archive file
    names</indexterm></indexterm><indexterm>file processing<indexterm>for File
    Tail</indexterm></indexterm>File Tail can process data based on the following common file
   generation and archive strategies:<dl>
    <dlentry>
     <dt>The server writes data to a single active file and generates archive files as needed</dt>
     <dd>The server writes new data to a single file, such as weblog.log. Periodically, it rolls
      older data from the active file to an archive file, such as weblog.log1 or
      weblog.log.2015-10-15. </dd>
     <dd>File Tail intelligently tracks its relative progress through new and archived data and is
      not affected by file name changes.</dd>
     <dd>Archived files can use the following naming conventions:<ul id="ul_ury_gzq_5r">
       <li><uicontrol>Reverse Counter</uicontrol> - The server appends a number to the end of each
        archived file, such as data.1, data.2, and so on.<p>File Tail processes files in reverse
         numeric order before progressing to the active file.</p></li>
       <li><uicontrol>Date</uicontrol> - The server appends a date to the end of the archived file,
        such as event.log.2015-11, event.log.2015-12. This method is generally used by Log4j
        servers. You select one of the provided date patterns. <p>File Tail processes files in
         reverse order based on the selected date pattern before progressing to the active file.
        </p></li>
       <li><uicontrol>Alphabetical</uicontrol> - The server generates files in alphabetically
        increasing order, such as a.json, b.json, c.json. You might use this method to process
        Apache logs archived using the ogrotate utility. You can also use this method to process
        files with appended dates that do not match the provided date patterns.<p>File Tail
         processes files in alphabetical order before progressing to the active file.</p></li>
      </ul></dd>
    </dlentry>
    <dlentry>
     <dt>The server writes creates a new active file as needed, archiving the previous file without
      renaming</dt>
     <dd>The server writes to an active file, creating a new active file as necessary. When it
      creates a new active file, it archives the previous active file without renaming it. The
      active file changes, but file names do not change. </dd>
     <dd>Files use a <uicontrol>File Name Pattern</uicontrol> naming convention. You use a regular
      expression to specify the pattern of the generated file names. </dd>
     <dd>When you select File Name Pattern as the the archive file naming convention, File Tail
      processes the files in alphabetical order before progressing to the most recent file - the
      active file. </dd>
     <dd>For example, if you use log_[0-9]{4}-[0-9]{2}-[0-9]{2}\\.json as the file name pattern,
      File Tail might read log-2015-5-01.json, then log-2015-05-02.json, and so on - until it
      reaches the file for the current date.</dd>
    </dlentry>
   </dl></p>
 </conbody>
</concept>
