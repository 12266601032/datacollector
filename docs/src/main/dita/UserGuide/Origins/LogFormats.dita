<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_tr1_spd_sr">
 <title>Log Formats</title>
 <shortdesc>When you use an origin to read log data, you define the format of the log files to be
  read. </shortdesc>
 <conbody>
  <p>You can read log files that use the following log formats:</p>
  <p>
   <dl>
    <dlentry>
     <dt>Common Log Format</dt>
     <dd>A standardized text format used by web servers to generate log files. Also known as the
      NCSA (National Center for Supercomputing Applications) Common Log format.</dd>
    </dlentry>
    <dlentry>
     <dt>Combined Log Format</dt>
     <dd>A standardized text format based on the common log format that includes additional
      information. Also known as the Apache/NCSA Combined Log Format.</dd>
    </dlentry>
    <dlentry>
     <dt>Apache Error Log Format</dt>
     <dd>The standardized error log format generated by the Apache HTTP Server 2.2.</dd>
    </dlentry>
    <dlentry>
     <dt>Apache Access Log Custom Format</dt>
     <dd>A customizable access log generated by the Apache HTTP Server 2.2. Use the Apache HTTP
      Server version 2.2 syntax to define the format of the log file. </dd>
    </dlentry>
    <dlentry>
     <dt>Regular Expression</dt>
     <dd>Use a regular expression to define the structure of log data, and then assign the field or
      fields represented by each group.  </dd>
     <dd>Use any valid regular expression.</dd>
    </dlentry>
    <dlentry>
     <dt>Grok Pattern</dt>
     <dd>Use a grok pattern to define the structure of log data. You can use the grok patterns
      supported by the <ph
       conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"/>. You can
      also define a custom grok pattern and then use it as part of the log format. </dd>
     <dd>For more information about supported grok patterns and defining custom grok patterns, see
       <draft-comment author="Loretta">Will create Grok appendix for the supported patterns after
       getting info from Hari. </draft-comment></dd>
    </dlentry>
    <dlentry>
     <dt>log4j</dt>
     <dd>A customizable format generated by the Apache Log4j 1.2 logging utility. You can use the
      default format or specify a custom format. Use the Apache Log4j version 1.2 syntax to define
      the format of the log file.</dd>
     <dd>You can also specify the action to take when the origin encounters an error when parsing a
      line. You can skip the line and optionally log an error. If you know that the unparsable
      information is part of a stack trace, you can have the origin include the unparsable
      information as a stack trace to the previous parsable line.</dd>
    </dlentry>
   </dl>
  </p>
 </conbody>
</concept>
