<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_vhs_5tz_xp">
 <title>Reusable phrases for the book</title>
 <shortdesc>Use the following reusable phrases for conrefs in the book:</shortdesc>
 <conbody>
            <p>Company name: <ph id="company">StreamSets</ph></p>
            <p>Full, init cap version of the product name: <ph id="pName-long">Data
                  Collector</ph></p>
            <p>
                  <draft-comment author="Loretta">Do we need a plural generic version?
                  </draft-comment>
            </p>
            <p>The following bullets are used in "Previewing a Single Stage" and
                  "Troubleshooting":</p>
       <ul id="ul_EditPreview">
                  <li>The output data column for an origin.</li>
                  <li>The input data column for processors.</li>
            </ul>
            <p>
                  <draft-comment author="Loretta">The following bullets are the types of origins
                        that can be reset / that remember where you left off. These are used
                        currently in "Starting a Pipeline" and "Resetting an
                        Origin":</draft-comment>
                  <ul id="ul_saveOffset">
                        <li>Directory</li>
                        <li>Kafka Consumer</li>
                  </ul>
            </p>
            <p>
                  <draft-comment author="Loretta">The following bullets are CSV file types. Used in
                        "Configuring a Directory Origin" and "Configuring the Kafka
                        Consumer"</draft-comment>
            </p>
            <p>
                  <ul id="ul_delFileTypes">
                        <li><uicontrol>Default CSV</uicontrol> - File that includes comma-separated
                              values. Ignores empty lines in the file.</li>
                        <li><uicontrol>RFC4180 CSV</uicontrol> - Comma-separated file that strictly
                              follows RFC4180 guidelines.</li>
                        <li><uicontrol>MS Excel CSV</uicontrol> - Microsoft Excel comma-separated
                              file.</li>
                        <li><uicontrol>MySQL CSV</uicontrol> - MySQL comma separated file.</li>
                        <li><uicontrol>Tab-Separated Values</uicontrol> - File that includes
                              tab-separated values.</li>
                  </ul>
            </p>
            <p>
                  <draft-comment author="Loretta">The following bullets are ways the Jython and
                        JavaScript Evaluators can process code: -- more info on these, make sure
                        they are good for both.</draft-comment>
                  <dl id="prccessingMode">
                        <dlentry>
                              <dt>Record by Record</dt>
                              <dd>The processor calls the script for each record. The processor
                                    passes the record to the script as a map and processes each
                                    record individually. </dd>
                              <dd>The processor handles error records based on the Error Record
                                    property defined for the processor, so the code does not require
                                    error handling logic. </dd>
                              <dd>Use this mode to avoid including error handling logic in the code.
                                    Since this mode calls the script for each record, this might
                                    affect the performance of the pipeline.</dd>
                        </dlentry>
                        <dlentry>
                              <dt>Record Batch</dt>
                              <dd>The processor calls the script for each batch. The processor
                                    passes the batch to the script as an array and processes the
                                    batch at one time. The array name is "records".</dd>
                              <dd>The script must include error handling code. </dd>
                              <dd>Use this mode to process a batch of data at a time. At the end of
                                    the script, include the following two functions:<ul
                                          id="ul_jn3_tvc_pr">
                                          <li>out.write (&lt;record>) - Passes the records to the
                                                pipeline.</li>
                                          <li>err.write (&lt;record>, &lt;message>) - Passes error
                                                records to error handling. <draft-comment
                                                  author="Loretta">check this!</draft-comment></li>
                                    </ul></dd>
                        </dlentry>
                  </dl>
            </p>
      </conbody>
</concept>
