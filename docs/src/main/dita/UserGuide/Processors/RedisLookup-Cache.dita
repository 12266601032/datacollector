<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_zcg_21p_zv">
 <title>Lookup Cache</title>
 <shortdesc>To improve pipeline performance, you can configure the Redis Lookup processor to locally
        cache the key-value pairs returned from Redis.</shortdesc>
 <conbody>
  <p><indexterm>Redis Lookup
                    processor<indexterm>cache</indexterm></indexterm><indexterm>cache<indexterm>Redis
                    Lookup processor</indexterm></indexterm>The Redis Lookup caches key-value pairs
            until the cache reaches the maximum size or the expiration time. When the first limit is
            reached, the processor evicts key-value pairs from the cache.</p>
        <p>You can configure the following ways to evict key-value pairs from the cache:<dl>
                <dlentry>
                    <dt>Size-based eviction</dt>
                    <dd>Configure the maximum number of key-value pairs that the processor caches.
                        When the maximum number is reached, the processor evicts the oldest
                        key-value pairs from the cache.</dd>
                </dlentry>
                <dlentry>
                    <dt>Time-based eviction</dt>
                    <dd>Configure the amount of time that a key-value pair can remain in the cache
                        without being written to or accessed. When the expiration time is reached,
                        the processor evicts the key from the cache. The eviction policy determines
                        whether the processor measures the expiration time since the last write of
                        the value or since the last access of the value.</dd>
                    <dd>For example, you set the eviction policy to expire after the last access and
                        set the expiration time to 60 seconds. After the processor does not access a
                        key-value pair for 60 seconds, the processor evicts the key-value pair from
                        the cache.</dd>
                </dlentry>
            </dl></p>
        <p>When you stop the pipeline, the Redis Lookup clears the cache.</p>
 </conbody>
</concept>
