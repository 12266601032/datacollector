<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_mqn_5vk_sr">
 <title>Jython Scripting Objects</title>
 <conbody>
  <p><indexterm>Jython Evaluator processor<indexterm>scripting
        objects</indexterm></indexterm><indexterm>scripting objects<indexterm>Jython
          Evaluator</indexterm></indexterm>You can use the following scripting objects in the Jython
        Evaluator:<draft-comment author="Loretta">port changes over to JavaScript Scripting Objects
        and Groovy Scripting Objects</draft-comment><dl>
        <dlentry>
          <dt>records</dt>
          <dd>A collection of records to process. The
            records object includes different elements based on the
            processing mode that you use:<ul id="ul_fdm_5yk_sr">
              <li>Record by Record - The records array includes one
                record element. A record includes a single
                <codeph>value</codeph> element. The
                <codeph>value</codeph> element contains the data
                for the record.</li>
              <li>Batch by Batch - The records array includes all
                records in the batch.</li>
            </ul></dd>
          <dd>Map and list record fields are mapped to Jython dictionaries and lists,
            respectively.</dd>
          <dd>Data types are preserved for values that are not modified. For values that are
            modified, the scripting engine might change the original type.</dd>
        </dlentry>
          <dlentry>
            <dt>state</dt>
            <dd>An object to store information between invocations of this script. A state is a map
              object that includes a collection of key/value pairs. You can use the state object to
              cache data such as a counter.</dd>
          </dlentry>
          <dlentry>
            <dt>log</dt>
            <dd>An object to write messages to the log. Includes four methods:
              <codeph>info()</codeph>, <codeph>warn()</codeph>, <codeph>debug()</codeph>, and
              <codeph>trace()</codeph>. </dd>
            <dd>The signature of the four methods is as follows:
              <codeblock>(message-template, argumentsâ€¦) </codeblock>The message template can have
              positional variables denoted by curly brackets: { }. The arguments are replaced in the
              message template curly brackets in positional manner, i.e., this is the first argument in
              the first { } occurrence, and so on.</dd>
          </dlentry>
          <dlentry>
            <dt>output</dt>
            <dd>An object that writes the record to the output batch. Includes a
              <codeph>write(Record)</codeph> method.</dd>
          </dlentry>
          <dlentry>
            <dt>error</dt>
            <dd>An object that passes error records to the processor for error handling. Includes a
              <codeph>write(Record, message)</codeph> method.</dd>
          </dlentry>
      </dl></p>
 </conbody>
</concept>
