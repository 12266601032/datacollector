<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_ahp_f4v_1r">
 <title>String Functions</title>
 <shortdesc>Use string functions to transform string data. <draft-comment author="Loretta">Can any
   parameter can be a field? </draft-comment></shortdesc>
 <conbody>
  <p><indexterm>functions<indexterm>string</indexterm></indexterm>In string functions, you can
   replace &lt;String> with a string value, a call a string field, or any expression that evaluates
   to a string. Similarly, you can replace parameters with expressions that evaluate to the
   appropriate value. Indexes start with 0. </p>
  <p>The expression language provides the following string functions:</p>
  <p>
   <dl>
    <dlentry>
     <dt>${str:substring("&lt;String>", &lt;beginIndex>, &lt;endIndex>)}</dt>
     <dd>Returns a subset of the string value that starts with the beginIndex character and ends
      before the endIndex character. </dd>
     <dd>Uses the following parameters:<ul id="ul_pcx_4yw_1r">
       <li>beginIndex - An integer that represents the beginning position of the returned substring,
        where 0 is the first character.</li>
       <li>endIndex - An integer that represents one character past end position of the substring,
        equivalent to the number of characters to return. </li>
      </ul></dd>
     <dd>For example, ${str:substring("Chewing Gum", 1, 4)} evaluates to Chew.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:trim("&lt;String>")} </dt>
     <dd>Trims leading and trailing white space characters from the string, including spaces and
      return characters.</dd>
     <dd>For example, ${str:trim("record:value("/Address")} trims leading and trailing white space
      characters from the /Address field.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:toUpper("&lt;String>")} </dt>
     <dd>Converts string data to all capital letters.</dd>
     <dd>For example, ${str:toUpper("true")} evaluates to TRUE.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:toLower("&lt;String>")} </dt>
     <dd>Converts string data to all lowercase letters.</dd>
     <dd>For example, ${str:toLower("&lt;FALSE>")} evaluates to false.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:replaceChar("&lt;String>", &lt;oldChar>, &lt;newChar>)} </dt>
     <dd>Replaces all instances of a specified character in a string with a new character.</dd>
     <dd>For example, ${str:replaceChar("lecucereche", e, a)} evaluates to lacucaracha.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:replaceString("&lt;String>", &lt;oldString>, STRING new)} </dt>
     <dd>Replaces a set of characters in a string with a new set of characters.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:truncate("&lt;String>", &lt;length>)}</dt>
     <dd>Returns a string truncated to the specified length. Use an integer to specify the length. </dd>
     <dd>For example, ${str:truncate("vacation", 4)} returns vaca. </dd>
    </dlentry>
    <dlentry>
     <dt>${str:regexCapture("&lt;String>", &lt;regex pattern>, &lt;group>}</dt>
     <dd>Parses a complex string into groups based on a Java regex pattern and returns the specified
      group.</dd>
     <dd>Uses the following parameters:<ul id="ul_fy1_qbx_1r">
       <li>regex pattern - The Java regex pattern to parse the string into groups</li>
       <li>group - The number of the group to return, where 1 represents the first group, 2
        represents the second group, etc. 0 returns the entire string.</li>
      </ul></dd>
    </dlentry>
    <dlentry>
     <dt>${str:contains("&lt;String>", "&lt;Subset>")} </dt>
     <dd>Returns a true or false based on whether the string contains the configured subset of
      characters.</dd>
     <dd>For example, ${str:contains("Jane", "boo")} returns false.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:startsWith("&lt;String>", "&lt;Subset>")} </dt>
     <dd>Returns true or false based on whether the string starts with the configured subset of
      characters.</dd>
     <dd>For example, ${str:startsWith("Data Collector", "Data")} returns true.</dd>
    </dlentry>
    <dlentry>
     <dt>${str:endWith("&lt;String>", "&lt;Subset>")} </dt>
     <dd>Returns true or false based on whether the string ends with the configured subset of
      characters.</dd>
     <dd>For example, ${str:endWith("32403-1001", "1001")} returns true.</dd>
    </dlentry>
   </dl>
  </p>
 </conbody>
</concept>
