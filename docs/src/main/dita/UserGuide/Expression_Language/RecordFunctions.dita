<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_p1z_ggv_1r">
 <title>Record Functions</title>
 <shortdesc>Use record functions to determine information about a record, such as the stage that
  created it or whether a field exists in the record. </shortdesc>
 <conbody>
  <p><indexterm>functions<indexterm>record functions</indexterm></indexterm><indexterm>record
     functions<indexterm>description</indexterm></indexterm>The expression language provides the
   following general record functions:</p>
  <dl>
   <dlentry>
    <dt>record:attribute('&lt;attribute name>')</dt>
    <dd>Returns the value of the specified record attribute. Use to return data, for example, for
     the "tag" attribute that you set using the File Tail origin. </dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:creator()</dt>
    <dd>Returns the instance name of the stage that created the record, typically an origin stage.
     Data is stored in the stageCreator field of a record. </dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:exists('&lt;field path>')</dt>
    <dd>Determines if the specified field is in a record. When the field is not in the record,
     returns 0. When the field is in the record, returns 1. </dd>
    <dd>Return type: Boolean.</dd>
   </dlentry>
   <dlentry>
    <dt>record:id()</dt>
    <dd>Returns the ID of the stage that created the record, typically an origin stage. Data is
     stored in the sourceId field of a record. </dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:path()</dt>
    <dd>Returns the stages in the pipeline that processed a record. Data is stored in the stagesPath
     field of a record. The field path uses the following
     format:<codeblock>&lt;origin instance name>:&lt;next stage instance name>:&lt;next stage instance name>:... </codeblock></dd>
    <dd>Return type: String.</dd>
   </dlentry>
   <dlentry>
    <dt>record:type('&lt;field path>')</dt>
    <dd>Checks the data type of a field. Possible return values are: <ul id="ul_lmr_2hv_1r">
      <li>Boolean</li>
      <li>Char</li>
      <li>Byte</li>
      <li>Short</li>
      <li>Integer</li>
      <li>Long</li>
      <li>Float</li>
      <li>Double</li>
      <li>Date</li>
      <li>Datetime</li>
      <li>Decimal</li>
      <li>String</li>
      <li>Byte-Array</li>
      <li>Map</li>
      <li>List</li>
     </ul></dd>
    <dd>Return type: String. </dd>
   </dlentry>
   <dlentry>
    <dt>record:value('&lt;field path>')</dt>
    <dd>Returns the value of the field in the appropriate data type.</dd>
    <dd>Return type: When the field includes a value, returns the type based on the field value.
     When the field is null, the function returns no value. </dd>
    <dd>
     <p>Nulls are coerced based on the expected return type of the function. For example, if an EL
      is expected to return a string, null will be coerced to an empty string. However, a null
      integer is coerced to 0.</p>
    </dd>
   </dlentry>
   <dlentry>
    <dt>record:valueOrDefault('&lt;field path>' , &lt;default value>)</dt>
    <dd>Returns the value of the field in the appropriate data type. If the field does not exist,
     returns the default value. If the field is null, the function returns a null value. </dd>
    <dd>Use to provide a default value when a field does not exist. </dd>
    <dd>Return type: Variable, based on whether the function returns the field value or default
     value.</dd>
    <dd>
     <p>
      <note outputclass="" othertype="" type="tip">To replace null values, you might add a tertiary
       operator as
       follows:<codeblock>record:value('/field path') == null ? '&lt;default value&gt;' : record:value('/field path')</codeblock></note>
     </p>
    </dd>
   </dlentry>
  </dl>
 </conbody>
</concept>
