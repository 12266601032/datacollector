<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
      
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="concept_qkr_trf_sw">
 <title>Time Functions</title>
 <shortdesc>Use time functions to return the current time or to transform datetime data.</shortdesc>
 <conbody>
  <p><indexterm>functions<indexterm>time functions</indexterm></indexterm><indexterm>time
                    functions<indexterm>description</indexterm></indexterm>You can replace any
            datetime argument with an expression that evaluates to a datetime value. You cannot
            replace a datetime argument with a datetime literal.</p>
        <p>You can replace any long or string argument with a literal or an expression that
            evaluates to the argument. String literals must be enclosed in single or double
            quotation marks.</p>
        <p>The expression language provides the following time functions:</p>
        <dl>
            <dlentry>
                <dt>time:extractDateFromString(&lt;string>, &lt;format string>)</dt>
                <dd>
                    <p>Extracts a Date object from a String, based on the specified date format.</p>
                    <p>Uses the following arguments:<ul id="ul_nzc_ybq_vy">
                            <li>string - String to extract the Date object from.</li>
                            <li>format string - String that specifies the date format of the data in
                                the &lt;string> argument. For information about creating a date
                                format, see <xref
                                    href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                    format="html" scope="external"/>.</li>
                        </ul></p>
                </dd>
                <dd>For example, the following expression converts the string '2017-05-01
                    20:15:30.915' to a Date
                    object:<codeblock>${time:extractDateFromString('2017-05-01 20:15:30.915','yyyy-MM-dd HH:mm:ss.SSS')}</codeblock></dd>
                <dd>Return type: Date object.</dd>
            </dlentry>
            <dlentry>
                <dt>time:extractLongFromDate(&lt;Date object>, &lt;format string>)</dt>
                <dd>Extracts a long value from a Date object, based on the specified date
                    format.</dd>
                <dd>Uses the following arguments:<ul id="ul_wcq_nhr_wx">
                        <li>Date object - Date object to extract the long value from.</li>
                        <li>format string - String that specifies the format of the Date data to be
                            extracted. For information about creating a date format, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul></dd>
                <dd> For example, the following expression returns the month as a long value from
                    the Date object stored in the Timestamp
                    field:<codeblock>${time:extractLongFromDate(record:value('/Timestamp')), "MM")}</codeblock></dd>
                <dd>Return type: Long.</dd>
                <dd>
                    <note>Because the function returns a long value, you cannot specify non-numeric
                        data in the data format string. For example, the date format "MMM" returns
                        the three character abbreviation for the month (such as "Jul"), which causes
                        the function to return incorrect results.</note>
                </dd>
            </dlentry>
            <dlentry>
                <dt>time:extractStringFromDate(&lt;Date object>, &lt;format string>)</dt>
                <dd>Extracts a string value from a Date object based on the specified date
                    format.</dd>
                <dd>Uses the following arguments:</dd>
                <dd>
                    <ul>
                        <li>Date object - Date object to extract the string value from.</li>
                        <li>format string - String that specifies the format of the Date data to be
                            extracted. For information about creating a date format, see <xref
                                href="https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html"
                                format="html" scope="external"/>.</li>
                    </ul>
                </dd>
                <dd> For example, the following expression returns the month as a string value from
                    the Date object stored in the Timestamp
                    field:<codeblock>${time:extractStringFromDate(record:value('/Timestamp')), "MMM")}</codeblock></dd>
                <dd>Return type: String.</dd>
            </dlentry>
            <dlentry>
                <dt>time:millisecondsToDateTime(&lt;long>)</dt>
                <dd>Converts an epoch or UNIX time in milliseconds to a Date object. </dd>
                <dd>If the epoch or UNIX time is in seconds, multiply the value by 1000 to produce a
                    value in the milliseconds range. For example, the following expression
                    multiplies the epoch time in seconds stored in the epochTime field and then
                    converts the value to a Date
                    object:<codeblock>${millisecondsToDateTime(record:value("/epochTime")* 1000)}</codeblock></dd>
                <dd>Return type: Date object.</dd>
            </dlentry>
            <dlentry>
                <dt>time:now()</dt>
                <dd>Returns the current time of the <ph
                        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                    /> machine as a java.util.Date object. </dd>
                <dd>For example, you might use the function in the Expression Evaluator to create a
                    field with the time of processing.</dd>
                <dd>Return type: Datetime.</dd>
            </dlentry>
            <dlentry>
                <dt>time:trimDate(&lt;datetime>)</dt>
                <dd>Trims the date portion of a datetime value by setting the date portion to
                    January 1, 1970.</dd>
                <dd>For example, if the current time of the <ph
                        conref="../Reusable_Content/ReusablePhrases.dita#concept_vhs_5tz_xp/pName-long"
                    /> machine is Jul 25, 2016 5:18:05 PM, then ${time.trimDate(time:now())}
                    returns: Jan 1, 1970 5:18:05 PM.</dd>
                <dd>Return type: Datetime. </dd>
            </dlentry>
            <dlentry>
                <dt>time:trimTime(&lt;datetime>)</dt>
                <dd>Trims the time portion of a datetime value by setting the time portion to
                    00:00:00.</dd>
                <dd>For example, if the value of the pickup_datetime field is Jul 22, 2016 11:16:10
                    AM, then ${time:trimTime(record:value("/pickup_datetime"))} returns: Jul 22,
                    2016 12:00:00 AM.</dd>
                <dd>Return type: Datetime.</dd>
            </dlentry>
        </dl>
 </conbody>
</concept>
