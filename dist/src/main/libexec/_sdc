#!/bin/bash
#
#
# Licensed under the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
#

# resolve links - $0 may be a softlink
PRG="${0}"

while [ -h "${PRG}" ]; do
ls=`ls -ld "${PRG}"`
link=`expr "$ls" : '.*-> \(.*\)$'`
if expr "$link" : '/.*' > /dev/null; then
PRG="$link"
else
PRG=`dirname "${PRG}"`/"$link"
fi
done

BASEDIR=`dirname ${PRG}`
BASEDIR=`cd ${BASEDIR}/..;pwd`

SDC_DIST=${BASEDIR}

SDC_HOME=${SDC_HOME:=${SDC_DIST}}

if [ ! "$1" = "-skipenvsourcing" ]
then
  if [ -f ${SDC_HOME}/libexec/sdc-env.sh ]
  then
    source ${SDC_HOME}/libexec/sdc-env.sh
  fi
fi

SDC_HOSTNAME=`hostname -f`
SDC_CONF=${SDC_CONF:=${SDC_HOME}/etc}
SDC_DATA=${SDC_DATA:=${SDC_HOME}/data}
SDC_LOG=${SDC_LOG:=${SDC_HOME}/log}
SDC_RESOURCES=${SDC_RESOURCES:=${SDC_HOME}/resources}
SDC_KAFKA_JAAS_CONF=${SDC_KAFKA_JAAS_CONF:="-Djava.security.auth.login.config=${SDC_CONF}/kafka_client_jaas.conf"}
export KRB5CCNAME=${KRB5CCNAME:="${SDC_DATA}/sdc-krb5.ticketCache"}
SDC_JAVA_OPTS=${SDC_JAVA_OPTS:="-Xmx1024m"}
SDC_MAIN_CLASS=${SDC_MAIN_CLASS:="com.streamsets.datacollector.main.DataCollectorMain"}
SDC_SECURITY_MANAGER_ENABLED=${SDC_SECURITY_MANAGER_ENABLED:="true"}

SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.dist.dir=${SDC_DIST}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.resources.dir=${SDC_RESOURCES}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.hostname=${SDC_HOSTNAME}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.conf.dir=${SDC_CONF}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.data.dir=${SDC_DATA}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.log.dir=${SDC_LOG}"

BOOTSTRAP_JAR="${SDC_DIST}/libexec/bootstrap-libs/main/streamsets-datacollector-bootstrap-${project.version}.jar"

SDC_JAVA_OPTS="${SDC_KAFKA_JAAS_CONF} ${SDC_JAVA_OPTS} -javaagent:${BOOTSTRAP_JAR}"

BOOTSTRAP_CLASSPATH="${BOOTSTRAP_JAR}"

if [ ! -z "${SDC_ROOT_CLASSPATH}" ]
then
  BOOTSTRAP_CLASSPATH="${BOOTSTRAP_CLASSPATH}:${SDC_ROOT_CLASSPATH}"
fi

API_CLASSPATH="${SDC_DIST}/api-lib/"'*.jar'

CONTAINER_CLASSPATH="${SDC_CONF}:${SDC_DIST}/container-lib/"'*.jar'

LIBS_COMMON_LIB_DIR="${LIBS_COMMON_LIB_DIR:=${SDC_DIST}/libs-common-lib/}"

STREAMSETS_LIBRARIES_DIR="${SDC_DIST}/streamsets-libs"

STREAMSETS_LIBRARIES_EXTRA_DIR=${STREAMSETS_LIBRARIES_EXTRA_DIR:=""}

USER_LIBRARIES_DIR="${SDC_HOME}/user-libs"
if [ ! -d "${USER_LIBRARIES_DIR}" ]
then
  USER_LIBRARIES_DIR="${SDC_DIST}/user-libs"
fi

if [ -z "$JAVA_HOME" ]
then
  JAVA=`which java`
else
  JAVA="$JAVA_HOME/bin/java"
fi

SDC_POLICY_FILE=""
if [ "${SDC_SECURITY_MANAGER_ENABLED}" = "true" ]
then
  SDC_POLICY_FILE=${SDC_POLICY_FILE:="file://${SDC_CONF}/sdc-security.policy"}
  if [[ "$SDC_POLICY_FILE" =~ (file:)(.*) ]]
  then
      SDC_POLICY_FILE_FOR_VALIDATION="${BASH_REMATCH[2]}"
  else
      SDC_POLICY_FILE_FOR_VALIDATION="$SDC_POLICY_FILE"
  fi
  if [[ ! -f "$SDC_POLICY_FILE_FOR_VALIDATION" ]]
  then
    echo "WARN: Security is enabled and was unable to verify policy file '$SDC_POLICY_FILE'" 1>&2
  fi
  SDC_SECURITY_MANAGER="-Djava.security.manager -Djava.security.policy=${SDC_POLICY_FILE}"
  SDC_JAVA_OPTS="${SDC_SECURITY_MANAGER} ${SDC_JAVA_OPTS}"
fi

if [ "$1" = "-verbose" ];
then
  echo "SDC Agent:"
  echo "  DIST                           : ${SDC_DIST}"
  echo "  HOME                           : ${SDC_HOME}"
  echo "  CONF                           : ${SDC_CONF}"
  echo "  DATA                           : ${SDC_DATA}"
  echo "  LOG                            : ${SDC_LOG}"
  echo "  RESOURCES                      : ${SDC_RESOURCES}"
  echo "  KAFKA_JAAS_CONF                : ${SDC_KAFKA_JAAS_CONF}"
  echo "  KRB5CCNAME                     : ${KRB5CCNAME}"
  echo "  SECURITY MANAGER POLICY        : ${SDC_POLICY_FILE}"
  echo "  JAVA PATH                      : ${JAVA}"
  echo "  BOOTSTRAP_CLASSPATH            : ${BOOTSTRAP_CLASSPATH}"
  echo "  API_CLASSPATH                  : ${API_CLASSPATH}"
  echo "  CONTAINER_CLASSPATH            : ${CONTAINER_CLASSPATH}"
  echo "  LIBS_COMMON_LIB_DIR            : ${LIBS_COMMON_LIB_DIR}"
  echo "  STREAMSETS_LIBRARIES_DIR       : ${STREAMSETS_LIBRARIES_DIR}"
  echo "  STREAMSETS_LIBRARIES_EXTRA_DIR : ${STREAMSETS_LIBRARIES_EXTRA_DIR}"
  echo "  USER_LIBRARIES_DIR             : ${USER_LIBRARIES_DIR}"
  echo "  JAVA OPTS                      : ${SDC_JAVA_OPTS}"
  echo "  MAIN CLASS                     : ${SDC_MAIN_CLASS}"
fi

cd ${SDC_DIST}

EXTRA_OPTIONS=""
if [ -n "${STREAMSETS_LIBRARIES_EXTRA_DIR}" ]
then
  EXTRA_OPTIONS="-streamsetsLibrariesExtraDir ${STREAMSETS_LIBRARIES_EXTRA_DIR}"
fi

exec ${JAVA} -classpath ${BOOTSTRAP_CLASSPATH} ${SDC_JAVA_OPTS} com.streamsets.pipeline.BootstrapMain \
-mainClass ${SDC_MAIN_CLASS} -apiClasspath "${API_CLASSPATH}" -containerClasspath "${CONTAINER_CLASSPATH}" \
-streamsetsLibrariesDir "${STREAMSETS_LIBRARIES_DIR}" -userLibrariesDir "${USER_LIBRARIES_DIR}" -configDir ${SDC_CONF} \
-libsCommonLibDir "${LIBS_COMMON_LIB_DIR}" ${EXTRA_OPTIONS}

# Remove credential cache if exists
#
if [ -f ${SDC_DATA}/sdc-krb5.ticketCache ]; then
  rm ${SDC_DATA}/sdc-krb5.ticketCache
fi

status=$?
echo "Exit: $status"
exit $status
