#!/bin/bash
#
# (c) 2014 StreamSets, Inc. All rights reserved. May not
# be copied, modified, or distributed in whole or part without
# written consent of StreamSets, Inc.
#

# resolve links - $0 may be a softlink
PRG="${0}"

while [ -h "${PRG}" ]; do
ls=`ls -ld "${PRG}"`
link=`expr "$ls" : '.*-> \(.*\)$'`
if expr "$link" : '/.*' > /dev/null; then
PRG="$link"
else
PRG=`dirname "${PRG}"`/"$link"
fi
done

BASEDIR=`dirname ${PRG}`
BASEDIR=`cd ${BASEDIR}/..;pwd`

SDC_DIST=${BASEDIR}

SDC_HOME=${SDC_HOME:=${SDC_DIST}}

if [ ! "$1" = "-skipenvsourcing" ]
then
  if [ -f ${SDC_HOME}/libexec/sdc-env.sh ]
  then
    source ${SDC_HOME}/libexec/sdc-env.sh
  fi
fi

SDC_HOSTNAME=`hostname -f`
SDC_CONF=${SDC_CONF:=${SDC_HOME}/etc}
SDC_DATA=${SDC_DATA:=${SDC_HOME}/data}
SDC_LOG=${SDC_LOG:=${SDC_HOME}/log}
SDC_RESOURCES=${SDC_RESOURCES:=${SDC_HOME}/resources}
SDC_JAVA_OPTS=${SDC_JAVA_OPTS:="-Xmx1024m"}
SDC_MAIN_CLASS=${SDC_MAIN_CLASS:="com.streamsets.datacollector.main.DataCollectorMain"}
SDC_SECURITY_MANAGER_ENABLED=${SDC_SECURITY_MANAGER_ENABLED:="true"}

SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.dist.dir=${SDC_DIST}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.hostname=${SDC_HOSTNAME}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.conf.dir=${SDC_CONF}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.data.dir=${SDC_DATA}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.log.dir=${SDC_LOG}"

BOOTSTRAP_CLASSPATH="${SDC_DIST}/libexec/bootstrap-libs/main/streamsets-datacollector-bootstrap-${project.version}.jar"
BOOTSTRAP_JAR="${BOOTSTRAP_CLASSPATH}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -javaagent:${BOOTSTRAP_JAR}"

API_CLASSPATH="${SDC_DIST}/api-lib/"'*.jar'

if [ ! -z "${SDC_PRE_CLASSPATH}" ]
then
  SDC_PRE_CLASSPATH="${SDC_PRE_CLASSPATH}:"
fi
if [ ! -z "${SDC_POST_CLASSPATH}" ]
then
  SDC_POST_CLASSPATH=":${SDC_POST_CLASSPATH}"
fi

CONTAINER_CLASSPATH="${SDC_CONF}:${SDC_DIST}/container-lib/"'*.jar'
CONTAINER_CLASSPATH="${SDC_PRE_CLASSPATH}${CONTAINER_CLASSPATH}${SDC_POST_CLASSPATH}"

STREAMSETS_LIBRARIES_DIR="${SDC_DIST}/streamsets-libs"

USER_LIBRARIES_DIR="${SDC_HOME}/user-libs"
if [ ! -d "${USER_LIBRARIES_DIR}" ]
then
  USER_LIBRARIES_DIR="${SDC_DIST}/user-libs"
fi

if [ -z "${JAVA_HOME}" ]
then
  JAVA=`which java`
else
  JAVA="${JAVA_HOME}/bin/java"
fi

SDC_POLICY_FILE=""
if [ "${SDC_SECURITY_MANAGER_ENABLED}" = "true" ]
then
  SDC_POLICY_FILE=${SDC_POLICY_FILE:="file://${SDC_CONF}/sdc-security.policy"}
  if [[ "$SDC_POLICY_FILE" =~ (file:)(.*) ]]
  then
      SDC_POLICY_FILE_FOR_VALIDATION="${BASH_REMATCH[2]}"
  else
      SDC_POLICY_FILE_FOR_VALIDATION="$SDC_POLICY_FILE"
  fi
  if [[ ! -f "$SDC_POLICY_FILE_FOR_VALIDATION" ]]
  then
    echo "WARN: Security is enabled and was unable to verify policy file '$SDC_POLICY_FILE'" 1>&2
  fi
  SDC_SECURITY_MANAGER="-Djava.security.manager -Djava.security.policy=${SDC_POLICY_FILE}"
  SDC_JAVA_OPTS="${SDC_SECURITY_MANAGER} ${SDC_JAVA_OPTS}"
fi

if [ "$1" = "-verbose" ];
then
  echo "SDC Agent:"
  echo "  DIST                     : ${SDC_DIST}"
  echo "  HOME                     : ${SDC_HOME}"
  echo "  CONF                     : ${SDC_CONF}"
  echo "  DATA                     : ${SDC_DATA}"
  echo "  LOG                      : ${SDC_LOG}"
  echo "  RESOURCES                : ${SDC_RESOURCES}"
  echo "  SECURITY MANAGER POLICY  : ${SDC_POLICY_FILE}"
  echo "  JAVA PATH                : ${JAVA}"
  echo "  BOOTSTRAP_CLASSPATH      : ${BOOTSTRAP_CLASSPATH}"
  echo "  API_CLASSPATH            : ${API_CLASSPATH}"
  echo "  CONTAINER_CLASSPATH      : ${CONTAINER_CLASSPATH}"
  echo "  STREAMSETS_LIBRARIES_DIR : ${STREAMSETS_LIBRARIES_DIR}"
  echo "  USER_LIBRARIES_DIR       : ${USER_LIBRARIES_DIR}"
  echo "  JAVA OPTS                : ${SDC_JAVA_OPTS}"
  echo "  MAIN CLASS               : ${SDC_MAIN_CLASS}"
fi

cd ${SDC_DIST}

exec ${JAVA} -classpath ${BOOTSTRAP_CLASSPATH} ${SDC_JAVA_OPTS} com.streamsets.pipeline.BootstrapMain \
-mainClass ${SDC_MAIN_CLASS} -apiClasspath "${API_CLASSPATH}" -containerClasspath "${CONTAINER_CLASSPATH}" \
-streamsetsLibrariesDir "${STREAMSETS_LIBRARIES_DIR}" -userLibrariesDir "${USER_LIBRARIES_DIR}"
status=$?
echo "Exit: $status"
exit $status
