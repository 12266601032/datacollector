StreamSets - Data Collector Development Environment

-------

Software requirements:

* Git 1.9+
* JDK 1.7.*
* Maven 3.2.3+
* Node 0.10.32+1  (OSX, avail via macports: sudo install nodejs)
** npm            (OSX, avail via macports: sudo install npm)
** bower          (avail via npm          : sudo npm -g install bower)
** grunt-cli      (avail via npm          : sudo npm -g install grunt-cli)

-------

Maven Profiles (use -P<profile-name>):

* (default) : builds the data collector modules without the ui module
* ui        : builds the data collector modules with the ui module
* dist      : builds a distribution of the data collector
              (if the 'ui' profile is active it will bundle UI in the distribution)
* docs      : used in conjunction with the 'dist' profile to generate documentation
              as part of the build
* all-libs  : builds all versions of stage libs (CDHs, Kafkas, etc)
* rbgen     : generates -bundles JARs

Maven Properties (use -D<property-name>):

* release : produces release tarballs for sdc and stage libraries under release/target/ directory.

            it activates dist, docs, all-libs, ui

* protolibs-only: it skips stage-libs modules for distro versions. Useful for shorter test runs.

-------

Running Testcases:

Use 'mvn package' to run tests. This triggers the shading of the SDK dependencies which
is required for libraries like cdh_5_4-lib/hdp_2_3-lib not to fail when running their
test cases.

-------

Code Coverage (using cobertura plugin):

To generate coverage report run:

  $ mvn cobertura:cobertura

  The coverage report of each module will be at [MODULE]/target/site/cobertura/index.html

To generate coverage report and check minimum coverage run:

  $ mvn cobertura:cobertura cobertura:check

Aggregating the coverage report for all modules:

  $ mvn cobertura:cobertura -Dcobertura.aggregate

  The aggregated coverage report will be at root/target/site/cobertura/index.html

-------

Preparing a Release:

* Update POM versions in master:

  $ mvn versions:set -Drelease -DnewVersion=<RELEASE_VERSION>-SNAPSHOT

  Manually update the version in the rbgen-maven-plugin POM

  Manually update the 'version' value in the  'datacollector-ui/package.json' file

* Cut a release branch in GIT and tag master branch

* Update POM versions in master branch

  $ mvn versions:set -Drelease -DnewVersion=<NEW_DEV_VERSION>-SNAPSHOT

  If necessary update manually any POM that has not been updated (expected ones: e2e-tests & rbgen-maven-plugin)

* Stabilize the release branch

* Update POM version in release branch with final version

  $ mvn versions:set -Drelease -DnewVersion=<RELEASE_VERSION>

  If necessary update manually any POM that has not been updated (expected ones: e2e-tests & rbgen-maven-plugin)

* Tag release branch

Doing patches/minor releases

* Same procedure as above but using starting release branch instead master branch
